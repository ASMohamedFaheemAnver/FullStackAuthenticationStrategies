const dotenv = require("dotenv");
const express = require("express");
const app = express();
const jwt = require("jsonwebtoken");

// Read .env
dotenv.config();

// Allow json body
app.use(express.json());

let refreshTokens = [];

app.post("/logout", (req, res) => {
  refreshTokens = refreshTokens?.filter(
    (refreshToken) => refreshToken !== req?.body?.refreshToken
  );
  res.json({ message: "Refresh token invoked" });
});

app.post("/login", (req, res) => {
  // Authenticate user
  const username = req.body?.username;
  // If you're building your own authentication system, it's a really good idea to include a flag in your payloads,
  // to indicate whether that token was generated by authenticating with user credentials, or by using a refresh token.
  // You can use this flag to authorize sensitive operations, such as changing your password or making payments - so if the user didn't log in recently,
  // you can prompt them to log in again for sensitive operations. I would say this is a must for most applications.
  const payload = { username, generatedBy: "USER_CREDENTIALS" };
  const accessToken = jwt.sign(payload, process.env?.ACCESS_TOKEN_SECRET, {
    expiresIn: "15s",
  });
  const refreshToken = jwt.sign(payload, process.env?.REFRESH_TOKEN_SECRET);
  refreshTokens.push(refreshToken);
  res.json({ accessToken, refreshToken });
});

app.post("/token", (req, res) => {
  const refreshToken = req.body?.refreshToken;
  if (!refreshToken) {
    return res.status(401).json({ message: "Token not provided" });
  }
  if (refreshTokens.includes(refreshToken)) {
    try {
      const payload = jwt.verify(
        refreshToken,
        process.env?.REFRESH_TOKEN_SECRET
      );
      const accessToken = jwt.sign(
        {
          username: payload?.username,
          generatedBy: "REFRESH_TOKEN",
        },
        process.env?.ACCESS_TOKEN_SECRET,
        { expiresIn: "15s" }
      );
      return res.json({ accessToken });
    } catch (e) {
      return res.status(401).json({ message: "Invalid token" });
    }
  }
  return res.status(403).json({ message: "Refresh token maybe invoked" });
});

const PORT = 4000;
app.listen(PORT, () => {
  console.log({ msg: `SERVER IS RUNNING ON PORT : ${PORT}` });
});
